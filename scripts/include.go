package main

import (
	"bytes"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"math/rand"
	"os"
	"strings"
	"time"

	"xc/utils"
)

func copyFile(src string, dst string) {
	input, err := ioutil.ReadFile(src)
	if err != nil {
		fmt.Println(err)
		return
	}
	err = ioutil.WriteFile(dst, input, 0644)
	if err != nil {
		fmt.Println("Error creating", dst)
		fmt.Println(err)
		return
	}
}

func main() {
	// make build unique
	copyFile("xc.go", "xc.bak")
	data, err := ioutil.ReadFile("xc.go")
	if err != nil {
		log.Fatal(err)
	}
	rand.Seed(time.Now().UnixNano())
	data = bytes.Replace(data, []byte("0000000000000000"), []byte(utils.RandSeq(16)), 1)
	ioutil.WriteFile("xc.go", data, 0644)

	dir := "files/keys"
	fs, _ := ioutil.ReadDir(dir)
	out, _ := os.Create("shell/keys.go")
	out.Write([]byte("package shell \n\n// autogenerated - do not modify\n\nconst (\n"))
	for _, f := range fs {
		log.Printf("Processing %s\n", f.Name())
		out.Write([]byte(strings.ReplaceAll(f.Name(), ".", "_") + " = `"))
		f, _ := os.Open(fmt.Sprintf("%s/%s", dir, f.Name()))
		io.Copy(out, f)
		out.Write([]byte("`\n"))
	}
	out.Write([]byte(")\n"))

	dir = "files/sc"
	fs, _ = ioutil.ReadDir(dir)
	out, _ = os.Create("meter/sc.go")
	out.Write([]byte("package meter \n\n// autogenerated - do not modify\n\nconst (\n"))
	for _, f := range fs {
		log.Printf("Processing %s\n", f.Name())
		out.Write([]byte(f.Name() + " = \""))
		data, err := ioutil.ReadFile(fmt.Sprintf("%s/%s", dir, f.Name()))
		if err != nil {
			log.Fatal(err)
		}
		enc, err := utils.Encrypt(utils.AESKEY, data)
		if err != nil {
			log.Fatal(err)
		}
		hexenc := ""
		for _, c := range enc {
			hexenc += fmt.Sprintf("%02x", c)
		}
		out.Write([]byte(hexenc))
		out.Write([]byte("\"\n"))
	}
	out.Write([]byte(")\n"))

	// load itm4ns script
	copyFile("client/client_windows.go", "client/client_windows.bak")
	data, err = ioutil.ReadFile("client/client_windows.go")
	if err != nil {
		log.Fatal(err)
	}
	script, _ := ioutil.ReadFile("files/powershell/PrivescCheck.ps1")
	scriptEncoded := []byte(base64.StdEncoding.EncodeToString(script))
	data = bytes.Replace(data, []byte("<PRIVESCCHECK>"), scriptEncoded, 1)
	ioutil.WriteFile("client/client_windows.go", data, 0644)
}
